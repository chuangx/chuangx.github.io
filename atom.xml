<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xstudio</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/chuangx/"/>
  <updated>2019-05-05T11:45:40.329Z</updated>
  <id>https://github.com/chuangx/</id>
  
  <author>
    <name>chuangx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Embracing Kotlin - from java</title>
    <link href="https://github.com/chuangx/2019/05/03/Embracing-kotlin/"/>
    <id>https://github.com/chuangx/2019/05/03/Embracing-kotlin/</id>
    <published>2019-05-02T17:29:38.000Z</published>
    <updated>2019-05-05T11:45:40.329Z</updated>
    
    <content type="html"><![CDATA[<p>When starting a new demo or toy project on android, kotlin becomes my go-to language. It has evolved a lot since 2017 when google makes it as first-class language for writing android apps. It has now stable coroutines in v1.3, kotlin native in beta, multi-platform supports, etc. You can definitely see where it‚Äôs trying to move to ;) As an android developer (for about 70% time), here are the things I love about kotlin.</p><a id="more"></a><h3 id="Concise-amp-readable-as-a-block"><a href="#Concise-amp-readable-as-a-block" class="headerlink" title="Concise &amp; readable as a block"></a>Concise &amp; readable as a block</h3><p>Let‚Äôs start demo by creating a notification channel for music playing service.</p><p>Typical java version</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager notificationManager = (NotificationManager) getSystemService(Service.NOTIFICATION_SERVICE);</span><br><span class="line"><span class="keyword">if</span> (notificationManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">    NotificationChannel channel = <span class="keyword">new</span> NotificationChannel(CHANNEL_ID, CHANNEL_NAME, NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class="line">    channel.enableLights(<span class="keyword">true</span>);</span><br><span class="line">    channel.setName(<span class="string">"uptown"</span>);</span><br><span class="line">    channel.setDescription(<span class="string">"music channel hosted by coffee-thoughts"</span>);</span><br><span class="line">    channel.setLightColor(Color.GREEN);</span><br><span class="line">    channel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC);</span><br><span class="line">    notificationManager.createNotificationChannel(channel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is the kotlin implementation</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> notificationManager = getSystemService(Service.NOTIFICATION_SERVICE) <span class="keyword">as</span>? NotificationManager</span><br><span class="line">notificationManager?.createNotificationChannel(</span><br><span class="line">    NotificationChannel(CHANNEL_ID, CHANNEL_NAME, NotificationManager.IMPORTANCE_DEFAULT).apply &#123;</span><br><span class="line">        enableLights(<span class="literal">true</span>)</span><br><span class="line">        name = <span class="string">"uptown"</span></span><br><span class="line">        description = <span class="string">"music channel hosted by coffee-thoughts"</span></span><br><span class="line">        lightColor = Color.GREEN</span><br><span class="line">        lockscreenVisibility = Notification.VISIBILITY_PUBLIC</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>The kotlin version has 1 line less of code? Hooray!<br>Well, when I use <strong><em>consice</em></strong> as the section title here, I didn‚Äôt really mean the number of lines code though. The kotlin implementation does have less code to write, but I won‚Äôt expect to use that to convince other folks to try out a new language. <em>(If you do get convinced by this reason, let me know, I‚Äôll still cheer for myself üçª)</em></p><p>Some differences from above examples, in kotlin‚Äôs implementation</p><ul><li><code>set</code> methods get replaced with kotlin generated synthetic properties</li><li>scope function <code>apply</code> eliminates intermediate local variables</li><li><code>as?</code> safe type casting &amp; <code>?.</code> if-not-null shorthand removes if-null checks</li></ul><p>If you know/familiar with kotlin syntax (if you‚Äôre not, leave out those syntax thing while reading), compared to java, kotlin code is much easier to read and understand, as <strong><em>there‚Äôre less noises and the control/execution flow is more intituive logically</em></strong>. The barebone structure of above example is</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notificationManager.createNotification(customized_notification_channel_instance)</span><br></pre></td></tr></table></figure><p>For the kotlin implementation, I would know what the code block is trying to do after the first two lines of the code but not for the java one. Kotlin is able to express above flow as expected while in java implementation, the <code>notificationManager</code> instance and its method call of <code>createNotification</code> just got cut off, you could workaround it by extracting it into helper function, but it‚Äôs just not something you get out of box.</p><h3 id="Nullable-amp-its-NPE"><a href="#Nullable-amp-its-NPE" class="headerlink" title="Nullable &amp; its NPE"></a><del>Nullable &amp; its NPE</del></h3><p>If you‚Äôre from the realm of java, you may share the same felling for the everywhere null checks and its sibling NPEs (<a href="https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions" target="_blank" rel="noopener">the billion-dollar mistake</a>). We have code review, <code>Nullable</code>, <code>NonNull</code> annotations to help, but developers usually ignore the lint warnings from IDE (<em>it‚Äôs just a warning, what could go wrong, right?</em>), the fact is just that people are bad at following rules, but computer does this better, so <strong><em>kotlin makes nullability into its type system</em></strong>. Think about it, <code>String</code> and nullable string <code>String?</code> are two different types <em>#mindblowing</em></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iKnowVarIsNeverNull = <span class="string">"default val"</span></span><br><span class="line">iKnowVarIsNeverNull = <span class="literal">null</span> <span class="comment">// compile error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> expectNullableVal :String? = <span class="string">""</span></span><br><span class="line">expectNullableVal = <span class="literal">null</span> <span class="comment">// okay</span></span><br></pre></td></tr></table></figure><p>How this gonna change our programming mental model? Let‚Äôs continue our demo of music player by building album root by iterating media metadata. The simplified java implementation is as below,  for each media metadata, it creates an album out of it and adds it to media root directory.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Builds a node, under the root, that represents an album, given</span></span><br><span class="line"><span class="comment"> * a [MediaMetadataCompat] object that's one of the songs on that album,</span></span><br><span class="line"><span class="comment"> * marking the item as [MediaItem.FLAG_BROWSABLE], since it will have child</span></span><br><span class="line"><span class="comment"> * node(s) AKA at least 1 song.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;MediaMetadataCompat&gt; <span class="title">buildAlbumRoot</span><span class="params">(@NonNull MediaMetadataCompat mediaMetadata)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. precondition check to make sure it's not null or lets hope null var is not passed in</span></span><br><span class="line">    Preconditions.isNotNull(mediaMetadata);</span><br><span class="line"></span><br><span class="line">    MediaMetadataCompat.Builder metaBuilder = <span class="keyword">new</span> MediaMetadataCompat.Builder();</span><br><span class="line">    String albumUri = mediaMetadata.getAlbumUri();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. defensive null-check (`setAblumUri` is a helper method only accepts non-null string)</span></span><br><span class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(albumUri)) &#123;</span><br><span class="line">        metaBuilder.setAlbumUri(albumUri);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MediaMetadataCompat albumMetadata = metaBuilder.build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. create the root if it does not exist yet</span></span><br><span class="line">    List&lt;MediaMetadataCompat&gt; rootList = mediaIdChildren.get(BROWSABLE_ROOT);</span><br><span class="line">    <span class="keyword">if</span> (rootList == <span class="keyword">null</span>) &#123;</span><br><span class="line">        rootList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    rootList.add(albumMetadata);</span><br><span class="line">    mediaIdChildren.put(BROWSABLE_ROOT, rootList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate &amp; return album list</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There‚Äôre 1 precondition check, 2 places of null-checks, from both defensive programming and inevtiable list initialization (line 22), we probably see similar code everyday if you‚Äôre coding in java. Is kotlin able to ease this pain? Here is the kotlin version implementing the same functionality</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">buildAlbumRoot</span><span class="params">(mediaItem: <span class="type">MediaMetadataCompat</span>)</span></span>: MutableList&lt;MediaMetadataCompat&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> albumMetadata = MediaMetadataCompat.Builder().apply &#123;</span><br><span class="line">        albumArtUri = mediaItem.albumArtUri?.toString()</span><br><span class="line">        <span class="comment">// other attributes settings</span></span><br><span class="line">    &#125;.build()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ensure the root node exists and add this album to the list.</span></span><br><span class="line">    <span class="keyword">val</span> rootList = mediaIdToChildren[BROWSABLE_ROOT] ?: mutableListOf()</span><br><span class="line">    rootList += albumMetadata</span><br><span class="line">    mediaIdToChildren[BROWSABLE_ROOT] = rootList</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate &amp; return album list</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">buildAlbumRoot</span><span class="params">(mediaItem: <span class="type">MediaMetadataCompat</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> albumMetadata = MediaMetadataCompat.Builder().apply &#123;</span><br><span class="line">        albumArtUri = mediaItem.albumArtUri?.toString()</span><br><span class="line">        <span class="comment">// other attributes settings</span></span><br><span class="line">    &#125;.build()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ensure the root node exists and add this album to the list.</span></span><br><span class="line">    <span class="keyword">val</span> rootList = mediaIdToChildren[BROWSABLE_ROOT] ?: mutableListOf()</span><br><span class="line">    rootList += albumMetadata</span><br><span class="line">    mediaIdToChildren[BROWSABLE_ROOT] = rootList</span><br><span class="line">    <span class="comment">// generate &amp; return album list</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>In kotlin one, we removed <code>@NonNull</code> annotation and its precondition check, we‚Äôre less paronoid about the argument nullability since we know that <code>MediaMetadataCompat</code> type (different from <code>MediaMetadataCompat?</code> remember?) is not-null by its nature, and the type system would do compile checks on it!</li><li>Code flow is much less distracted when working with nullability, <code>if-null</code> and <code>if-not-null</code> get replaced by <code>?.</code> and <code>?:</code> syntax sugar, small thing like this really makes a huge difference on readability</li></ol><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><p>I work with iOS sometimes, one thing I .</p><h3 id="Builder-style-method-usage"><a href="#Builder-style-method-usage" class="headerlink" title="Builder style method usage"></a><del>Builder style method usage</del></h3><h3 id="Android-support"><a href="#Android-support" class="headerlink" title="Android support"></a>Android support</h3><h3 id="Sweet-syntax-sugars-and-other-‚Äòfun‚Äô-I-love"><a href="#Sweet-syntax-sugars-and-other-‚Äòfun‚Äô-I-love" class="headerlink" title="Sweet syntax sugars and other ‚Äòfun‚Äô I love"></a>Sweet syntax sugars and other ‚Äòfun‚Äô I love</h3><ul><li>data class</li><li>string interpolation</li><li>scope functions</li><li>lazy properties</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When starting a new demo or toy project on android, kotlin becomes my go-to language. It has evolved a lot since 2017 when google makes it as first-class language for writing android apps. It has now stable coroutines in v1.3, kotlin native in beta, multi-platform supports, etc. You can definitely see where it‚Äôs trying to move to ;) As an android developer (for about 70% time), here are the things I love about kotlin.&lt;/p&gt;
    
    </summary>
    
    
      <category term="kotlin" scheme="https://github.com/chuangx/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>IPC in Android</title>
    <link href="https://github.com/chuangx/2019/05/01/IPC-in-Android/"/>
    <id>https://github.com/chuangx/2019/05/01/IPC-in-Android/</id>
    <published>2019-05-01T11:32:04.000Z</published>
    <updated>2019-05-05T02:02:23.756Z</updated>
    
    <content type="html"><![CDATA[<p>What IPC (inter-process communication) mechanisms are commonly used in android, and how does it work under the hood? IPC typically gets ignored by app developers as it is so well encapsulated by android system so that we don‚Äôt need to care about it. But IPC actually runs everywhere from app starts to any interactions to system or third party apps, so how the magic works?<br><a id="more"></a></p><p>Well, first all, let‚Äôs warm up a bit, what IPC mechanisms are supported by linux? We have <strong><em>signals, pipes, sockets, message queues, semaphores and shared memory</em></strong>, etc.</p><p>On android, the underlying mechanisms are still the same, but it‚Äôs presented quite differently to developers, let‚Äôs run through some scenarios we typically run into:</p><ol><li><p>Share text through system share action sheet</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// share plain text through system action sheet</span></span><br><span class="line"> startActivity(</span><br><span class="line">     <span class="comment">// create chooser intent with proper meta data</span></span><br><span class="line">     Intent.createChooser(</span><br><span class="line">         Intent().apply &#123;</span><br><span class="line">             type = <span class="string">"text/plain"</span></span><br><span class="line">             putExtra(Intent.EXTRA_TEXT, <span class="string">"https://chuangx.github.io"</span>)</span><br><span class="line">         &#125;, <span class="string">"checkout this"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>Start a foreground service to play music</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// start music services</span></span><br><span class="line">startService(</span><br><span class="line">   Intent(<span class="keyword">this</span>, MusicService::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>).<span class="title">apply</span> </span>&#123;</span><br><span class="line">       action = ACTION_START</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></li><li><p>Retrieve contacts data from phone app</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What IPC (inter-process communication) mechanisms are commonly used in android, and how does it work under the hood? IPC typically gets ignored by app developers as it is so well encapsulated by android system so that we don‚Äôt need to care about it. But IPC actually runs everywhere from app starts to any interactions to system or third party apps, so how the magic works?&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Evolving of android threading &amp; background tasks</title>
    <link href="https://github.com/chuangx/2019/04/07/Development-of-background-tasks-in-android/"/>
    <id>https://github.com/chuangx/2019/04/07/Development-of-background-tasks-in-android/</id>
    <published>2019-04-07T04:01:53.000Z</published>
    <updated>2019-05-01T15:00:10.134Z</updated>
    
    <content type="html"><![CDATA[<p>ËøôÁØáÊñáÁ´†‰∏ªË¶ÅÂ§ßËá¥ËÆ≤Ëß£Âú®android‰∏äÂÆûÁé∞ÂêéÂè∞‰ªªÂä°ÁöÑÂá†ÁßçÊñπÊ≥ïÔºåÂÆÉ‰ª¨‰πãÈó¥ÁöÑÂå∫Âà´‰ª•ÂèäÂºÄÂèë‰∏≠ÁöÑÊúÄ‰Ω≥ÂÆûË∑µ„ÄÇ<br>ÂêéÂè∞‰ªªÂä° (background tasks/operations) ÊòØ‰∏Ä‰∏™ÂæàÂÆΩÊ≥õÁöÑÊ¶ÇÂøµÔºåÂú®android‰∏äÊàë‰ª¨ÈÄöÂ∏∏ÊåáÈùû‰∏ªÁ∫øÁ®ãÁöÑ‰ªªÂä°Ôºå‰æãÂ¶ÇÁΩëÁªúÊìç‰ΩúÔºåËØªÂÜôÊï∞ÊçÆÂ∫ìÔºèÊñá‰ª∂ÊàñÊòØÂÆöÊó∂‰ªªÂä°Á≠âÁ≠âÔºåËøô‰∫õ‰ªªÂä°ÈÄöÂ∏∏ËÄóÊó∂ËæÉ‰πÖÂõ†ËÄåÈúÄË¶ÅÂºÇÊ≠•Â§ÑÁêÜ„ÄÇAndroidÁªôÂºÄÂèëËÄÖÊèê‰æõ‰∫ÜÂæàÂ§ö‰∏çÂêåÁöÑapiÊù•ÂÅöËøô‰ª∂‰∫ãÊÉÖÔºåÊØîÂ¶ÇAsyncTask, Loader, IntentService, JobIntentService, AlarmManager, JobDispatcher, JobScheduler, WorkManager‚Ä¶ ahÔºåÈô§‰∫Ü‰ª•‰∏äËøô‰∫õÔºåÊàë‰ª¨ËøòÊúârxjava (the list might keep growing) </p><a id="more"></a><p>AsyncTaskÂá∫Áé∞Âú®API 3‰∏≠ÔºåÁõ∏‰ø°Â§ßÂÆ∂Âú®androidÂºÄÂèëÁöÑÂàùÊúüÂ∞±Â∑≤ÁªèÊé•Ëß¶Ëøá‰∫Ü„ÄÇ‰∏Ä‰∏™ÊúâË∂£ÁöÑ‰∫ãÊÉÖÊòØAsyncTaskÊúÄÂàùËÆæËÆ°ÊòØÂú®‰∏Ä‰∏™ÂêéÂè∞Á∫øÁ®ã‰∏ä‰∏≤Ë°åÊâßË°åÊâÄÊúâÁöÑ‰ªªÂä°ÔºåÂú®API 4‰∏≠‰∏∫‰∫ÜÊèêÂçáÊïàÁéáÂèòÊàê‰∫ÜÂ§öÁ∫øÁ®ãÂπ∂Ë°åÂ§ÑÁêÜÔºå2Âπ¥‰πãÂêéÂú®android 3.0 (API 11) Âõ†‰∏∫ÊúâÂ§™Â§öÂ∫îÁî®Âπ∂ÂèëÈîôËØØ‰∏≠ÂèàÊîπÂõû‰∫ÜÈªòËÆ§ÂçïÁ∫øÁ®ã‰∏≤Ë°åÂ§ÑÁêÜ :shrug<br>AsyncTaskÁöÑÂá∫Áé∞ÊòØ‰∏∫‰∫ÜÁÆÄÂåñandroid‰∏äÂêéÂè∞Á∫øÁ®ãÂ§ÑÁêÜ‰ª•ÂèäÂíå‰∏ªÁ∫øÁ®ãÁöÑÈÄö‰ø°Ôºå‰ΩÜÊòØÊúâ‰∏Ä‰∏™ÈóÆÈ¢òÊòØÂÆÉÂπ∂‰∏çËÉΩÂæàÂ•ΩÁöÑÂ§ÑÁêÜ activity/fragment ÁöÑÁîüÂëΩÂë®Êúü„ÄÇ‰∏Ä‰∏™Êàë‰ª¨ÁªèÂ∏∏ÈÅáÂà∞ÁöÑÈóÆÈ¢òÂ∞±ÊòØÁî®Êà∑ÊóãËΩ¨Â±èÂπï‰πãÂêéÔºåÂΩìÂâçactivityË¢´ÈáçÊñ∞ÂàõÂª∫Ôºå‰ΩÜÊòØAsyncTask‰ºöÁªßÁª≠ËøêË°åÂπ∂ÊåÅÊúâÂâç‰∏Ä‰∏™activityÁöÑreferenceÔºåËøôÊ†∑‰∏ç‰ªÖÂØºËá¥Ââç‰∏Ä‰∏™activityÊ≤°ÊúâÂäûÊ≥ïË¢´Á´ãÂàªÈîÄÊØÅÔºåËÄå‰∏îonPostExecuteÂØπUIÁöÑÊõ¥Êñ∞‰ºöÊ≤°ÊúâÊïàÊûúÂõ†‰∏∫ÂÖ∂Â∞ùËØïÊõ¥Êñ∞ÁöÑÊòØÂâç‰∏Ä‰∏™activity„ÄÇ<br>ÊâÄ‰ª•Êàë‰ª¨ÁªèÂ∏∏ÈúÄË¶ÅÂØπAsyncTaskÂÅöÈ¢ùÂ§ñÁöÑÁîüÂëΩÂë®ÊúüÁÆ°ÁêÜÔºåÊØîÂ¶ÇÂú®activity#onStop‰∏≠ÂéªÂèñÊ∂àÊâÄÊúâËøòÊ≤°ÊúâÁªìÊùüÁöÑAsyncTaskÔºåÔºàÂΩìÁÑ∂‰Ω†ÂèØ‰ª•ÈÄöËøáÈòªÊ≠¢activity/fragmentÁöÑÊñ∞Âª∫ÂéªËß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢ò, but it‚Äôs really a terrible idea, think twice before doing anything like that)„ÄÇÈöè‰πãËÄåÊù•ÁöÑÂè¶‰∏Ä‰∏™ÂùëÂ∞±ÊòØAsyncTask#cancel is best effort, ËÄå‰∏îcancelÂπ∂‰∏ç‰ºöÁ´ãÂàª ÈòªÊñ≠doInBackgroundÁöÑ‰ªªÂä°ÊâßË°åÔºå ÊâÄ‰ª•Êàë‰ª¨ÈúÄË¶Å‰∏çÊñ≠Ê£ÄÊü•isCancelled Á°Æ‰øù‰ªªÂä°ÂèØ‰ª•Â∞ΩÂø´ÂèñÊ∂àÊéâ„ÄÇÂ¶ÇÊûú‰Ω†ÊÉ≥Ë¶Å‰∫ÜËß£ÁöÑÊõ¥Â§öAsyncTaskÁöÑÈóÆÈ¢òÔºåDan Lew ÁöÑËøôÁØáÊñáÁ´†ÊúâÊõ¥Ê∑±ÂÖ•ÁöÑËÆ≤Ëß£„ÄÇ<br><a href="http://blog.danlew.net/2014/06/21/the-hidden-pitfalls-of-asynctask/" target="_blank" rel="noopener">http://blog.danlew.net/2014/06/21/the-hidden-pitfalls-of-asynctask/</a><br>blog.danlew.net</p><p>AsyncTaskÁöÑËøô‰∫õÁº∫ÁÇπÁ°ÆÂÆûÁªôÊàë‰ª¨Â∏¶Êù•‰∫ÜÂæàÂ§öboilerplate codeËÄå‰∏î‰∏Ä‰∏çÂ∞èÂøÉÂ∞±ÂÆπÊòìÂá∫ÈîôÔºåÊàë‰∏ÄËà¨Âè™ÊúâÂú®ÂºÇÊ≠•Êìç‰ΩúÊª°Ë∂≥‰ª•‰∏ãÊù°‰ª∂ÁöÑÊó∂ÂÄô‰ºö‰ΩøÁî®AsyncTask:</p><ul><li>Simple and quick operations - to avoid blocking other possible async tasks as it‚Äôs running in serial by default</li><li>No UI update involved - to avoid extra lifecycle management </li><li>Killable - the task can be killed/cancelled if necessary </li></ul><p>Â¶ÇÊûúÊòØÊª°Ë∂≥‰∏äËø∞‰∏â‰∏™Êù°‰ª∂ÁöÑÊìç‰ΩúÁöÑËØùÔºåÊàë‰ª¨ÂèØ‰ª•Áõ¥Êé•‰ΩøÁî®AsyncTask.execute(Runnable r) Â∞±ÂèØ‰ª•‰∫ÜÔºåe.g. ÂºÇÊ≠•Ëé∑ÂèñÊõ¥Êñ∞ËÆæÂ§áÁöÑad info AdvertisingIdClient.getAdvertisingIdInfo.</p><p>ÂÖ∂ÂÆûLoaderÁöÑÂá∫Áé∞(API 11)Êú¨Êù•Â∞±ÊòØ‰∏∫‰∫ÜËß£ÂÜ≥‰∏äÈù¢ÊèêÂà∞ÁöÑAsyncTask lifecycleÈóÆÈ¢òÔºåAsyncTaskLoaderÊòØLoaderÁöÑ‰∏Ä‰∏™ÂÆûÁé∞Ôºå‰ªéÂêçÂ≠ó‰∏≠‰πüÂèØ‰ª•ÁúãÂá∫ËÆæËÆ°ÁöÑÂàùË°∑„ÄÇ‰ΩÜÊòØ‰πüÊúâÂæàÂ§öÁº∫Èô∑‰∏ÄÁõ¥Ë¢´ÂºÄÂèëËÄÖÊä±ÊÄ®Ôºåconfusing api, testability and boilerplate code, etc. Âú®API 28‰∏≠ÔºåLoaderÂ∑≤Ë¢´ÂÆòÊñπdeprecatedÔºåÊé®Ëçê‰ΩøÁî® ViewModel + LiveData. </p><blockquote><p>Loaders have been deprecated as of Android P (API 28). The recommended option for dealing with loading data while handling the Activity and Fragment lifecycles is to use a combination of ViewModels and LiveData. ViewModels survive configuration changes like Loaders but with less boilerplate. LiveData provides a lifecycle-aware way of loading data that you can reuse in multiple ViewModels.<br>If you‚Äôve never used loader before, congrats, time to go with architecture component directly!</p></blockquote><p>ServiceÂú®ÂêéÂè∞‰ªªÂä°Â§ÑÁêÜ‰∏≠ÂèàÊâÆÊºî‰∫ÜÊÄéÊ†∑ÁöÑ‰∏Ä‰∏™ËßíËâ≤Âë¢ÔºüServiceËÆæËÆ°‰πãÂàùÂ∞±ÊòØ‰∏∫‰∫ÜÂèØ‰ª•Âú®ÂêéÂè∞ÊâßË°ålong-running operations, ‰∏Ä‰∏™Â∏∏ËßÅÁöÑËØØËß£Â∞±ÊòØServiceÂ∞±ÊòØËøêË°åÂú®background thread‰∏äÁöÑÔºåÊàëÊÉ≥ÂÖ∂‰∏≠‰∏ÄÂ§ßÂéüÂõ†Â∞±ÊòØÊù•Ëá™ServiceÁöÑÂÆö‰πâÔºåbackground + long-running operationsÂæàÂÆπÊòìÁªô‰∫∫ÊúâÈîôËØØÁöÑÂÅáÂÆö„ÄÇ </p><blockquote><p>A Service is an application component that can perform long-running operations in the background, and it doesn‚Äôt provide a user interface.</p></blockquote><p>ServiceÈªòËÆ§ËøêË°åÂú®ÂΩìÂâçÂ∫îÁî®ËøõÁ®ãÁöÑ‰∏ªÁ∫ø‰∏≠ÔºåÊâÄ‰ª•Â¶ÇÊûúÈúÄË¶ÅÊâßË°åblocking or intensive work (different from long-running operations)ÔºåÊàë‰ª¨ËøòÊòØÈúÄË¶ÅËá™Â∑±ÂàõÂª∫Êñ∞ÁöÑËøõÁ®ã„ÄÇ‰∏∫‰∫ÜÊñπ‰æøÂºÄÂèëÔºåAndroidÂÆûÁé∞‰∫ÜIntentServiceÔºåÂÆÉÈÄöËøá‰∏Ä‰∏™ÂêéÂè∞Á∫øÁ®ãÂéªÂ§ÑÁêÜÊâÄÊúâÁöÑ‰ªªÂä°ËØ∑Ê±ÇÔºåÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØ‰ªªÂä°ÁöÑÂ§ÑÁêÜÊòØ‰∏≤Ë°åÁöÑ„ÄÇ<br>ÈÇ£‰πàIntentServiceÊàñÊòØÈÄöËøáServiceÂÆûÁé∞ÁöÑÂÖ∂ÂÆÉÂêéÂè∞‰ªªÂä°Â§ÑÁêÜÂíåAsyncTaskÊàñÊòØThreadÁöÑÂå∫Âà´ÊòØ‰ªÄ‰πàÂë¢Ôºü<br>ËôΩÁÑ∂ÂÆÉ‰ª¨Êú¨Ë¥®‰∏äÈÉΩÊòØÂØπThreadÁöÑÂ∞ÅË£ÖÔºå‰ΩÜÊòØÂÆÉ‰ª¨ÊúâÂÆåÂÖ®‰∏çÂêåÁöÑËÆæËÆ°ÂàùË°∑„ÄÇÂØπ‰∫éAsyncTaskËÄåË®ÄÔºåÊõ¥Â§öÁöÑÂíåActivity/UIÂÖ≥ËÅîÔºåËÄå‰∏î‰ªªÂä°Â§ÑÁêÜÈÄöÂ∏∏ÊòØË¶ÅÊ±ÇÂæàÁü≠ÔºåËÄåServiceÊõ¥Â§öÁöÑÊòØÂú®Â∫îÁî®Â§Ñ‰∫éÂêéÂè∞ÔºàÊ≤°ÊúâÁî®Êà∑‰∫§‰∫íÊàñÊòØUIÊõ¥Êñ∞ÔºâÊó∂ÂèëÊå•‰ΩúÁî®ÔºåËÄå‰∏îÂú®‰ªªÂä°Ê≤°ÊúâÂÆåÊàê‰πãÂâçÔºåServiceÂèØ‰ª•Ë¶ÅÊ±ÇÂú®Á≥ªÁªüËµÑÊ∫êÂÖÖË∂≥Êó∂ÈáçÂêØ„ÄÇ<br>JobIntentServiceÂèàÊòØÊÄé‰πà‰∏ÄÂõû‰∫ãÔºü Ëøô‰∫õÁºòËµ∑‰∫éAndroidÂØπÂêéÂè∞‰ªªÂä°ÁöÑÈôêÂà∂Âíå‰ºòÂåñ„ÄÇÊàë‰ª¨‰πãÂêéÂú®ÂêéÂè∞‰∏ÄÁõ¥ËøêË°åServiceÂÖ∂ÂÆûÂæàÂêÉÁ≥ªÁªüËµÑÊ∫êÔºåÁâπÂà´ÊòØÊúâ‰∏çÂ∞ëÊó†ËâØApp‰ºöÈÄöËøáServiceÂ∏∏È©ªÂêéÂè∞ÔºåÁªôÁî®Êà∑Â∏¶Êù•‰∫ÜÂæàÂ∑ÆÁöÑÁî®Êà∑‰ΩìÈ™å„ÄÇÊâÄ‰ª•Android NÔºàAndroid 7.0ÔºâÂíå Android OÔºàAndroid 8.0ÔºâÁ≥ªÁªüÂØπBackground ServiceÂíåBroadcastÂÅö‰∫Ü‰∏ÄÂÆöÁöÑÈôêÂà∂ÔºåÂÖ∂‰∏≠ÁöÑ‰∏Ä‰∫õÈôêÂà∂ÂåÖÊã¨Ôºö<br>‰∏çÂèØ‰ª•Âú®Â∫îÁî®Â§Ñ‰∫éÂêéÂè∞Áä∂ÊÄÅÊó∂call startServiceÂêØÂä®ServiceÔºåIllegalStateException will be thrown otherwise<br>ÂΩìÂ∫îÁî®ÈÄÄÂà∞ÂêéÂè∞‰πãÂêéÔºåÁ≥ªÁªü‰ºöÁªôÂ∫îÁî®Âá†ÂàÜÈíüÂ∑¶Âè≥ÁöÑÊó∂Èó¥ÁªßÁª≠ËøêË°å‰πãÂâçÊâÄÂàõÂª∫ÂêØÂä®ÁöÑÂêéÂè∞ÊúçÂä°Ôºå‰πãÂêé‰æø‰ºöË¢´Á≥ªÁªüÊ†áËÆ∞‰∏∫Á©∫Èó≤Áä∂ÊÄÅÔºåÂπ∂ÂÅúÊ≠¢ËØ•ÂêéÂè∞ÊúçÂä°„ÄÇ</p><p>Above limitations are only background service as foreground service is more visible to users.</p><p>ÂØπ‰∫éBroadcastÁöÑÈôêÂà∂ÂåÖÊã¨Ôºö</p><ul><li>Android 7.0 ‰∏≠Ôºåapp can NOT send or receive ACTION_NEW_PICTURE or ACTION_NEW_VIDEO broadcast</li><li>App targeting Android 7.0 and higher can‚Äôt receive CONNECTIVITY_ACTION if it‚Äôs declared in manifest</li><li>From Android OÔºåall implicit broadcast receivers declared in manifest file will not work</li></ul><p>Ëøô‰πàÂÅöÁöÑÂéüÂõ†ÂæàÁÆÄÂçïÔºåÂõ†‰∏∫implicit broadcastÊòØ‰∏Ä‰∏™ÂæàÊµ™Ë¥πÁ≥ªÁªüËµÑÊ∫êÁöÑ‰∫ãÊÉÖ„ÄÇÊØîÂ¶ÇÊúâ10‰∏™Â∫îÁî®Ê≥®ÂÜåÂπ∂ÁõëÂê¨‰∫ÜËøô‰∏™CONNECTIVITY_ACTIONËøô‰∏™ÂπøÊí≠ÔºåÂΩìÁî®Êà∑ÊâãÊú∫ÁöÑÁΩëÁªúËøûÊé•ÂèëÁîüÂèòÂåñÊó∂ÔºåËøô10‰∏™Â∫îÁî®ÈÉΩ‰ºöË¢´Âî§Ëµ∑ÂéªÂ§ÑÁêÜËøô‰∏™‰∫ã‰ª∂Ôºå‰ΩÜÂèØËÉΩÂÖ∂‰∏≠90%ÁöÑÂ∫îÁî®Âè™ÂÖ≥ÂøÉÁî®Êà∑ÊòØÂê¶ËøûÊé•Âà∞wifi‰ª•‰æøÂêåÊ≠•Êï∞ÊçÆÔºåÈÇ£‰πàÂΩìÁî®Êà∑Â§±ÂéªÁΩëÁªúËøûÊé•ÊàñÊòØËøûÊé•Âà∞metered networkÊó∂ÔºåËøô‰∫õÂ∫îÁî®ÈÉΩË¢´‰∏çÂøÖË¶ÅÁöÑÂî§ÈÜí‰∫Ü„ÄÇ<br>‰∏∫‰∫ÜËß£ÂÜ≥Ëøô‰∫õÈóÆÈ¢òÔºåÂπ∂ÁªôÂºÄÂèëËÄÖÊèê‰æõÊõ¥Âä†Êô∫ËÉΩÁöÑÂêéÂè∞‰ªªÂä°Â§ÑÁêÜÔºåAndroidÊèêÂá∫‰∫ÜJobÂíåJobSchedulerÁöÑÊ¶ÇÂøµÔºåÂú®‰∏ã‰∏ÄÁØáÊñáÁ´†‰∏≠Êàë‰ª¨Â∞Ü‰ºöÊúâËøõ‰∏ÄÊ≠•ÁöÑ‰∫ÜËß£„ÄÇ</p><p>‰∏ä‰∏ÄÁØáÊñáÁ´†‰∏≠Êàë‰ª¨Â§ßËá¥ËÆ≤Ëß£‰∫ÜAsyncTask, Loader, IntentServiceÁöÑÂå∫Âà´‰ª•ÂèäAPIÁöÑÊºîÂèòÂèëÂ±ïÔºå‰∏∫‰∫Ü‰ºòÂåñÂêéÂè∞‰ªªÂä°ÔºåÁªôÂºÄÂèëËÄÖÊèê‰æõÊõ¥Âä†Êñπ‰æøÊô∫ËÉΩÁöÑ‰ªªÂä°Â§ÑÁêÜÔºåAndroidÂú®5.0 (API 21)‰∏≠Êé®Âá∫‰∫ÜJobScheduler„ÄÇ<br>JobSchedulerÁöÑ‰∏ÄÂ§ß‰ºòÁÇπÂ∞±ÊòØÂÆÉÊòØÂü∫‰∫éÊù°‰ª∂ËÄåÈùûÊó∂Èó¥ËÄåËøõË°å‰ªªÂä°Â§ÑÁêÜÁöÑ„ÄÇ [ref <a href="https://medium.com/google-developers/scheduling-jobs-like-a-pro-with-jobscheduler-286ef8510129]" target="_blank" rel="noopener">https://medium.com/google-developers/scheduling-jobs-like-a-pro-with-jobscheduler-286ef8510129]</a> (ËøôÁØáÊñáÁ´†ËÆ≤ÁöÑÂæàÊ£íÔºâ„ÄÇ<br>JobScheduler performs work based on conditions, not on time.<br>ÈÄöËøáJobInfoÊàë‰ª¨ÂèØ‰ª•ÂæàÂÆπÊòìÂæóÈÖçÁΩÆÂêéÂè∞‰ªªÂä°ÊâÄÈúÄÁöÑÂêÑÁßçÊù°‰ª∂ ÔºåÊØîÂ¶ÇÁΩëÁªúÁ±ªÂûãÔºåÁ≥ªÁªüÊòØÂê¶Á©∫Èó≤Ôºå ÊòØÂê¶Âú®ÂÖÖÁîµÁ≠âÁ≠âÔºåÂú®Android 8.0 (API 26)‰∏≠ÔºåÊàë‰ª¨ËøòÂèØ‰ª•ËÆæÁΩÆÁîµÈáèÂíåÂ≠òÂÇ®ÂÆπÈáèÁöÑÈôêÂà∂„ÄÇ</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val jobScheduler = context.getSystemService(Context.JOB_SCHEDULER_SERVICE) as JobScheduler</span><br><span class="line">        jobScheduler.schedule(JobInfo.Builder(JOB_ID, ComponentName(context, CustomJobService::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line"><span class="class">            .<span class="title">setRequiredNetworkType</span>(<span class="title">JobInfo</span>.<span class="title">NETWORK_TYPE_UNMETERED</span>) // ËøûÊé•<span class="title">wifi</span>Êó∂</span></span><br><span class="line"><span class="class">            .<span class="title">setRequiresDeviceIdle</span>(<span class="title">true</span>)    // ÈúÄË¶ÅÁ≥ªÁªüÁ©∫Èó≤</span></span><br><span class="line"><span class="class">            .<span class="title">setRequiresCharging</span>(<span class="title">true</span>)      // ËÆæÂ§áÂÖÖÁîµ‰∏≠</span></span><br><span class="line"><span class="class">            .<span class="title">setRequiresBatteryNotLow</span>(<span class="title">true</span>) // <span class="title">requires</span> <span class="title">API</span> 26 ÁîµÈáè</span></span><br><span class="line"><span class="class">            .<span class="title">setRequiresStorageNotLow</span>(<span class="title">true</span>) // <span class="title">requires</span> <span class="title">API</span> 26 Â≠òÂÇ®ÂÆπÈáè</span></span><br><span class="line"><span class="class">            .<span class="title">build</span>())</span></span><br></pre></td></tr></table></figure><p>JobSchdulerÈÄöËøáÂú®Á≥ªÁªüÁ∫ßÂà´ÂÆûÁé∞ÊâÄÊúâÂ∫îÁî®ÂêéÂè∞‰ªªÂä°ÁöÑÁªü‰∏ÄË∞ÉÂ∫¶ÔºåËøôÊ†∑Êàë‰ª¨Â∞±‰∏çÁî®ÈÄöËøáAlarmManager‰∏çÊñ≠Âî§Ëµ∑Â∫îÁî®ÂéªÊ£ÄÊü•Âπ∂ÊâßË°å‰ªªÂä°‰∫ÜÔºåÊûÅÂ§ßÁ®ãÂ∫¶‰∏äÁºìËß£‰∫ÜÁîµÈáèÁöÑÊçüËÄó„ÄÇ<br>Êàë‰ª¨ÊâÄÈúÄË¶ÅÊâßË°åÁöÑ‰ªªÂä°ÈÄöËøáJobServiceÊù•ÂÆûÁé∞ÔºåJobServiceÊòØ‰∏Ä‰∏™bound serviceÔºåÂè™‰∏çËøáÂÆÉÂÆûÁé∞Âú®Ëá™Â∑±ÁöÑIBinder‰ª•‰æøJobSchedulerËøõË°åÈÄö‰ø°„ÄÇÊàë‰ª¨Âè™ÈúÄË¶ÅÂÆûÁé∞Â¶Ç‰∏ã‰∏§‰∏™ÊñπÊ≥ïÂ∞±ÂèØ‰ª•‰∫Ü„ÄÇ</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Êàë‰ª¨ÈúÄË¶ÅÂú®Ëøô‰∏™ÊñπÊ≥ïÂõûË∞É‰∏≠ÂºÄÂßã‰ªªÂä°„ÄÇ</span></span><br><span class="line"><span class="comment"> * ÂíåÂÖ∂ÂÆÉService‰∏ÄÊ†∑ÔºåÈªòËÆ§Âú®‰∏ªÁ∫øÁ®ãÊâßË°åÔºåÊâÄ‰ª•‰ªª‰ΩïÂèØËÉΩÈòªÂ°ûUIÁöÑÊìç‰ΩúÈÉΩÂ∫îËØ•ÈÄöËøáworker threadÂéªÊâßË°å„ÄÇ</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params    ÂÖ≥‰∫éÂΩìÂâçjobÁöÑ‰∏Ä‰∫õ‰ø°ÊÅØ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true Â¶ÇÊûúÂΩìÂâçjobËøòÈúÄË¶ÅÊâßË°å‰∏ÄÊÆµÊó∂Èó¥ÔºàÊØîÂ¶ÇÂºÄÂêØ‰∫ÜÊñ∞ÁöÑÁ∫øÁ®ãÔºâ, Âèç‰πãreturn false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> fun <span class="title">onStartJob</span><span class="params">(params: JobParameters)</span>: Boolean</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * Âõ†‰∏∫JobServiceÊòØÂü∫‰∫éÊù°‰ª∂Ë∞ÉÂ∫¶ÁöÑÔºåÊâÄ‰ª•ÂΩìÊâÄÈúÄÁöÑÊù°‰ª∂‰∏çÂÜçÊª°Ë∂≥Êó∂ÔºåÁ≥ªÁªü‰æø‰ºöÈÄöËøáËøô‰∏™ÂõûË∞ÉÈÄöÁü•Êàë‰ª¨ÔºåÊàë‰ª¨ÈúÄË¶Å</span></span></span><br><span class="line"><span class="function"><span class="comment"> * Âú®Ëøô‰∏™ÊñπÊ≥ï‰∏≠ÂÅúÊ≠¢Ê≠£Âú®ÊâßË°åÁöÑ‰ªªÂä°Âπ∂ÂÆåÊàêÁõ∏Â∫îÁöÑ‰∏≠Êñ≠Â§ÑÁêÜ„ÄÇ</span></span></span><br><span class="line"><span class="function"><span class="comment"> *</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @param params    ÂÖ≥‰∫éÂΩìÂâçjobÁöÑ‰∏Ä‰∫õ‰ø°ÊÅØ, ÊØîÂ¶Çjob idÔºå‰ªªÂä°ÂÅúÊ≠¢ÂéüÂõ†Á≠âÁ≠â</span></span></span><br><span class="line"><span class="function"><span class="comment"> * @return true Â¶ÇÊûúÂΩìÂâç‰∏≠Êñ≠ÁöÑ‰ªªÂä°ÈúÄË¶ÅË¢´ÈáçÊñ∞Ë∞ÉÂ∫¶ÔºåÂèç‰πãreturn false</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> fun <span class="title">onStopJob</span><span class="params">(params: JobParameters)</span>: Boolean</span></span><br></pre></td></tr></table></figure><p>ÊâÄ‰ª•Âú®Android L+ (5.0+ API 21+)ÂêéÔºåÊâÄÊúâÂ§çÊùÇÔºåÂë®ÊúüÊÄßÁöÑÂêéÂè∞‰ªªÂä°Êàë‰ª¨ÈÉΩÂèØ‰ª•ÈÄöËøáJobSchedulerÊù•ÂÆûÁé∞‰ª•ËææÂà∞Êõ¥Â•ΩÁöÑÊÄßËÉΩ„ÄÇ<br>WARNING - JobSchedulerÂú®API 21Âíå22‰∏≠ÊúâÂæàÂ§öbugÔºåÊâÄ‰ª•Â¶ÇÊûúÊàë‰ª¨Âú®production‰∏≠ÔºåÊúÄÂ•ΩÂú®API 23+‰πãÂêéÊâç‰ΩøÁî®JobScheduler„ÄÇ<br>ËÆ≤Âà∞ËøôÔºåÂè¶‰∏Ä‰∏™Êàë‰ª¨ÈúÄË¶Å‰∫ÜËß£ÁöÑÈÉ®‰ª∂Â∞±ÊòØJobDispatcherÔºåÂÆÉÁöÑÂ≠òÂú®Â∞±ÊòØ‰∏∫‰∫ÜÂÆûÁé∞JobSchedulerÁöÑÂêëÂêéÂÖºÂÆπ (ÊúÄ‰ΩéÊîØÊåÅ API 14)„ÄÇJobDispatcherÊù•Ëá™‰∫éFirebaseÔºåÂÆÉËÆæËÆ°‰∫ÜÂíåJobSchedulerÁ±ª‰ººÁöÑAPIÔºåÂú®Android L+ÁöÑÁ≥ªÁªü‰∏≠ÔºåÂ∫ïÂ±ÇÁöÑÂÆûÁé∞Â∞±ÊòØJobScheduler„ÄÇÂú®Android L‰πãÂâçÁöÑÁ≥ªÁªü‰∏≠ÔºåÂÆÉÈÄöËøá‰ΩøÁî®Google Play ServiceÊù•ÂÖÖÂΩìÁªü‰∏ÄË∞ÉÂ∫¶ËÄÖÁöÑËßíËâ≤ÔºåËøô‰πüÂ∞±ÊÑèÂë≥ÁùÄÈúÄË¶ÅËÆæÂ§áÂÆâË£ÖGMSÊâçÂèØ‰ª•ÔºåÂØπ‰∫éÂõΩÂÜÖÁöÑÁî®Êà∑Êù•ËØ¥ÔºåÊàë‰ª¨‰πüÂ∞±Âè™ÈúÄË¶Å‰∫ÜËß£‰∏Ä‰∏ãÂ∞±Â•Ω‰∫ÜÔºåÂèç‰πã‰πü‰∏çÂ§ßÁî®Âæó‰∏ä :(<br>WorkManager ÊòØ‰ªäÂπ¥IOÊé®Âá∫ÁöÑÊñ∞ÁöÑAPIÔºåÊúÄÁÆÄÂçïÁöÑÊ¶ÇÊã¨Â∞±ÊòØÂÆÉÊòØÂØπÊàë‰ª¨‰πãÂâçÊèêÂà∞ÁöÑJobScheduler, JobDispatcher, AlarmManagerÁöÑÂè¶‰∏ÄÂ±ÇÂ∞ÅË£ÖÔºåÂÆÉ‰ºöÊ†πÊçÆ‰∏çÂêåÁ≥ªÁªüÈÄâÊã©ÂêàÈÄÇÁöÑÂÆûÁé∞ÊñπÂºè„ÄÇÂΩìÁÑ∂ÂÆÉËøòÁªôÊàë‰ª¨Êèê‰æõ‰∏Ä‰∫õÂÖ∂ÂÆÉÁöÑÂäüËÉΩÔºåÊØîÂ¶ÇÊõ¥Âä†ÁÅµÊ¥ªÁöÑ‰ªªÂä°Ë∞ÉÂ∫¶chain jobsÔºåi.e. <code>WorkManager.getInstance().beginWith(A, B).then(C).then(D).enqueue()</code>„ÄÇ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="meta">@NonNull</span> <span class="function">Scheduler <span class="title">createBestAvailableBackgroundScheduler</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">    Scheduler scheduler;</span><br><span class="line">    <span class="keyword">boolean</span> enableFirebaseJobService = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> enableSystemAlarmService = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= WorkManagerImpl.MIN_JOB_SCHEDULER_API_LEVEL) &#123;</span><br><span class="line">        scheduler = <span class="keyword">new</span> SystemJobScheduler(context);</span><br><span class="line">        setComponentEnabled(context, SystemJobService.class, <span class="keyword">true</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"Created SystemJobScheduler and enabled SystemJobService"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        scheduler = tryCreateFirebaseJobScheduler(context);</span><br><span class="line">            enableFirebaseJobService = <span class="keyword">true</span>;</span><br><span class="line">            Log.d(TAG, <span class="string">"Created FirebaseJobScheduler"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// Also catches the exception thrown if Play Services was not found on the device.</span></span><br><span class="line">            scheduler = <span class="keyword">new</span> SystemAlarmScheduler(context);</span><br><span class="line">            enableSystemAlarmService = <span class="keyword">true</span>;</span><br><span class="line">            Log.d(TAG, <span class="string">"Created SystemAlarmScheduler"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class firebaseJobServiceClass = Class.forName(FIREBASE_JOB_SERVICE_CLASSNAME);</span><br><span class="line">        setComponentEnabled(context, firebaseJobServiceClass, enableFirebaseJobService);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="comment">// Do nothing.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setComponentEnabled(context, SystemAlarmService.class, enableSystemAlarmService);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> scheduler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SchedulerÊòØÁî®Êù•Ë∞ÉÂ∫¶Â∑•‰ΩúÁöÑinterfaceÔºå‰ªéüëÜÁöÑ‰ª£Á†ÅÊÆµ‰∏≠Êàë‰ª¨ÂèØ‰ª•ÁúãÂà∞WorkManagerÊòØÂ¶ÇÊûúÊ†πÊçÆÁ≥ªÁªüÊù°‰ª∂ÂàõÂª∫SchedulerÁöÑÔºåÁÆÄÊòìÁöÑÂÜ≥Á≠ñÂõæÂ¶Ç‰∏ã</p><p>ÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØWorkManagerÂíåService‰∏ÄÊ†∑ÔºåÊòØÁî®Êù•ÂÆûÁé∞ÈÇ£‰∫õÂç≥‰æøÂ∫îÁî®Ë¢´ÊùÄÊ≠ª‰πãÂêé‰ªçÈúÄÂÆåÊàêÁöÑ‰ªªÂä°„ÄÇÂØπ‰∫éÈÇ£‰∫õÂâçÂè∞ÁöÑËÄóÊó∂‰ªªÂä°ÔºåÊàë‰ª¨ÈúÄË¶ÅÈÄöËøáAnsycTaskÔºåThreadPoolÊù•ÂÆûÁé∞ÔºåËØ¶ÊÉÖÂèØ‰ª•ÈòÖËØªÂâç‰∏ÄÁØáÊñáÁ´†„ÄÇ<br>Â∏åÊúõËøô‰∏§ÁØáÊñáÁ´†ËÉΩÂ§üÁªôÂ§ßÂÆ∂ÂØπandroidÂêéÂè∞‰ªªÂä°ÁöÑAPIÊºîÂèòÊúâ‰∏Ä‰∏™Â§ßËá¥ÁöÑ‰∫ÜËß£ÔºåÂπ∂Â≠¶‰ºöÊ†πÊçÆÈ°πÁõÆË¶ÅÊ±ÇÈÄâÊã©ÊúÄÂêàÈÄÇÁöÑÂÆûÁé∞„ÄÇ</p><p>happy coding </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ËøôÁØáÊñáÁ´†‰∏ªË¶ÅÂ§ßËá¥ËÆ≤Ëß£Âú®android‰∏äÂÆûÁé∞ÂêéÂè∞‰ªªÂä°ÁöÑÂá†ÁßçÊñπÊ≥ïÔºåÂÆÉ‰ª¨‰πãÈó¥ÁöÑÂå∫Âà´‰ª•ÂèäÂºÄÂèë‰∏≠ÁöÑÊúÄ‰Ω≥ÂÆûË∑µ„ÄÇ&lt;br&gt;ÂêéÂè∞‰ªªÂä° (background tasks/operations) ÊòØ‰∏Ä‰∏™ÂæàÂÆΩÊ≥õÁöÑÊ¶ÇÂøµÔºåÂú®android‰∏äÊàë‰ª¨ÈÄöÂ∏∏ÊåáÈùû‰∏ªÁ∫øÁ®ãÁöÑ‰ªªÂä°Ôºå‰æãÂ¶ÇÁΩëÁªúÊìç‰ΩúÔºåËØªÂÜôÊï∞ÊçÆÂ∫ìÔºèÊñá‰ª∂ÊàñÊòØÂÆöÊó∂‰ªªÂä°Á≠âÁ≠âÔºåËøô‰∫õ‰ªªÂä°ÈÄöÂ∏∏ËÄóÊó∂ËæÉ‰πÖÂõ†ËÄåÈúÄË¶ÅÂºÇÊ≠•Â§ÑÁêÜ„ÄÇAndroidÁªôÂºÄÂèëËÄÖÊèê‰æõ‰∫ÜÂæàÂ§ö‰∏çÂêåÁöÑapiÊù•ÂÅöËøô‰ª∂‰∫ãÊÉÖÔºåÊØîÂ¶ÇAsyncTask, Loader, IntentService, JobIntentService, AlarmManager, JobDispatcher, JobScheduler, WorkManager‚Ä¶ ahÔºåÈô§‰∫Ü‰ª•‰∏äËøô‰∫õÔºåÊàë‰ª¨ËøòÊúârxjava (the list might keep growing) &lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://github.com/chuangx/tags/android/"/>
    
  </entry>
  
</feed>
